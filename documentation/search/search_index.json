{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction First of all Thanks for purchasing Taxi solution. This guide will walk you through the installation proccess. To start this app on your server you will need a linux VPS with at least 1 GB of ram (2GB recommended). Then you will need to have a SSH client and an FTP client installed on your machine. For the SSH client you have Termius available which is free and multi-platform supporting macOS, Windows linux. Copying files to server For FTP client you can use anyone of the options you like and all three operating systems have one implemented in themselves too. Copy server folder to your server using FTP client of your choice. The final folder structure of your server would look like this: 1 2 3 4 \u2514\u2500\u2500\u2500 root / \u251c\u2500\u2500\u2500 server - linux \u251c\u2500\u2500\u2500 public / \u2502 \u251c\u2500\u2500\u2500 ... Connect to server Connect to your linux VPS using IP address and root password provided by your hosting provider. Below are a few useful SSH command that you will use frequently during installation: Usefull commands cd [dir] : You can enter a directory using this command. for example: cd dashboard will enter folder dashboard. cd .. : The will get you to parent directory. ls : List all file folder names in current directory. nano [file] : A simple text editor that will come handy in the process. Now let's start server installation","title":"Introduction"},{"location":"index.html#introduction","text":"First of all Thanks for purchasing Taxi solution. This guide will walk you through the installation proccess. To start this app on your server you will need a linux VPS with at least 1 GB of ram (2GB recommended). Then you will need to have a SSH client and an FTP client installed on your machine. For the SSH client you have Termius available which is free and multi-platform supporting macOS, Windows linux.","title":"Introduction"},{"location":"index.html#copying-files-to-server","text":"For FTP client you can use anyone of the options you like and all three operating systems have one implemented in themselves too. Copy server folder to your server using FTP client of your choice. The final folder structure of your server would look like this: 1 2 3 4 \u2514\u2500\u2500\u2500 root / \u251c\u2500\u2500\u2500 server - linux \u251c\u2500\u2500\u2500 public / \u2502 \u251c\u2500\u2500\u2500 ...","title":"Copying files to server"},{"location":"index.html#connect-to-server","text":"Connect to your linux VPS using IP address and root password provided by your hosting provider. Below are a few useful SSH command that you will use frequently during installation: Usefull commands cd [dir] : You can enter a directory using this command. for example: cd dashboard will enter folder dashboard. cd .. : The will get you to parent directory. ls : List all file folder names in current directory. nano [file] : A simple text editor that will come handy in the process. Now let's start server installation","title":"Connect to server"},{"location":"faq.html","text":"FAQ Some of questions or problem that user might encounter. What kind of web panel i need? Nothing. App is based on node so you won't need apache or any other PHP web-service like other websites. A clean server is much preffered for this app because your resource won't be used for something that you don't need. but if you already have a VPS using for other stuffs you can still use this app given that you could update the version of mySQL. I have received \"An Unknown Error occured\" during authentication. This error happens when your apk application id or fingerprint doesn't match what has been entered on firebase console. Make sure of those two being correct and generate new google-services.json and try again in a few minutes. My server app and dashboards are started correctly but i can't open them on browser This could happen if firewall is not open for the ports used by app for external connections for example you can open port 8080 using these commands: CentOS 7 1 2 sudo firewall-cmd --zone = public --add-port = 8080 /tcp --permanent sudo firewall-cmd --reload Ubuntu 16.04 1 2 sudo ufw allow 8080 ufw reload","title":"FAQ"},{"location":"faq.html#faq","text":"Some of questions or problem that user might encounter.","title":"FAQ"},{"location":"faq.html#what-kind-of-web-panel-i-need","text":"Nothing. App is based on node so you won't need apache or any other PHP web-service like other websites. A clean server is much preffered for this app because your resource won't be used for something that you don't need. but if you already have a VPS using for other stuffs you can still use this app given that you could update the version of mySQL.","title":"What kind of web panel i need?"},{"location":"faq.html#i-have-received-an-unknown-error-occured-during-authentication","text":"This error happens when your apk application id or fingerprint doesn't match what has been entered on firebase console. Make sure of those two being correct and generate new google-services.json and try again in a few minutes.","title":"I have received \"An Unknown Error occured\" during authentication."},{"location":"faq.html#my-server-app-and-dashboards-are-started-correctly-but-i-cant-open-them-on-browser","text":"This could happen if firewall is not open for the ports used by app for external connections for example you can open port 8080 using these commands: CentOS 7 1 2 sudo firewall-cmd --zone = public --add-port = 8080 /tcp --permanent sudo firewall-cmd --reload Ubuntu 16.04 1 2 sudo ufw allow 8080 ufw reload","title":"My server app and dashboards are started correctly but i can't open them on browser"},{"location":"upgrade.html","text":"Server Before upgrade make sure you have a backup of your database if you are in production. Then replace the files with new one and restart app from pm2 pm2 restart server-linux Android iOS Updating those will depend on changes done if any (This includes configurations you have done as instructed on their own sections). Using a VCS (Github, BitBucket etc.) can help you track of changes and upgrade easily. It is necessary to use same package versions so if you have updated your server it is important that you update your Android iOS client too with files in same version package.","title":"Upgrade"},{"location":"upgrade.html#server","text":"Before upgrade make sure you have a backup of your database if you are in production. Then replace the files with new one and restart app from pm2 pm2 restart server-linux","title":"Server"},{"location":"upgrade.html#android-ios","text":"Updating those will depend on changes done if any (This includes configurations you have done as instructed on their own sections). Using a VCS (Github, BitBucket etc.) can help you track of changes and upgrade easily. It is necessary to use same package versions so if you have updated your server it is important that you update your Android iOS client too with files in same version package.","title":"Android &amp; iOS"},{"location":"client-android/auth.html","text":"Firebase Authentication Firebase phone authentication has been used for driver and rider's SMS authenticatioin proccess. It free and has been localized for many countries and languages. SHA-1 fingerprint Each apk you generate needs to be signed by a keystore wheter you generate a debug or a release apk. Many API providers encourage you or even make you to have your APK's keystore fingerprint added on their API console so only you and your APK would be able to use that API's resources. With that explanation let's get SHA-1 fingerprint of debug and release keystore and add them on Firebase console because it's mandatory for Firebase Authentication to work too (Optional but recomended for Google Maps too). Generate Release keystore If you don't have a release keystore already or don't know how to generate one you can do that in this section. To create a keystore open terminal panel in Android studio and enter following command: 1 keytool -genkey -v -keystore release.keystore -alias [ your_alias_name ] -keyalg RSA -keysize 2048 -validity 10000 Don't forget to replace [your_alias_name] with an alias name of your choice, like thetaxireleasekey . after entering this command you will be taken through some questions that you need to fill and will work as signature of your release APKs. after that you will need to enter your release key's passwords and alias in file gradle.properties so generation of SHA-1 key and APK's would be done automatically from now on. Get SHA-1 key If you have done the previous step correctly this should be pretty easy. Open Gradle panel in Android studio. Then open node of Tasks- android- signingReport . Runing signingReport will show a report on Run panel that has SHA-1 key for both release key and debug key. Now have this SHA-1 keys copied somewhere because you will need it during applying for Firebase Authentication. Important Firebase Auth won't work in Emulator, So always use real device for that purpose. Create Project Go to Firebase Console and Here you can create new projects. You will need 2. One For driver and one for rider . Do the following steps for both of them. Enable Phone Authentication After you log into Firebase choice firebase auth and enable Phone sign-in method. Develop- Authentication- Setup Sign-In method- Phone- Enable- Save Get google-services.json In each driver \\ rider project page you will have to add one app with target of Android. With fingerprints put during wizard you can download the google-services.json that you need to put it in driver and rider folder of your android project.","title":"Firebase Auth"},{"location":"client-android/auth.html#firebase-authentication","text":"Firebase phone authentication has been used for driver and rider's SMS authenticatioin proccess. It free and has been localized for many countries and languages.","title":"Firebase Authentication"},{"location":"client-android/auth.html#sha-1-fingerprint","text":"Each apk you generate needs to be signed by a keystore wheter you generate a debug or a release apk. Many API providers encourage you or even make you to have your APK's keystore fingerprint added on their API console so only you and your APK would be able to use that API's resources. With that explanation let's get SHA-1 fingerprint of debug and release keystore and add them on Firebase console because it's mandatory for Firebase Authentication to work too (Optional but recomended for Google Maps too).","title":"SHA-1 fingerprint"},{"location":"client-android/auth.html#generate-release-keystore","text":"If you don't have a release keystore already or don't know how to generate one you can do that in this section. To create a keystore open terminal panel in Android studio and enter following command: 1 keytool -genkey -v -keystore release.keystore -alias [ your_alias_name ] -keyalg RSA -keysize 2048 -validity 10000 Don't forget to replace [your_alias_name] with an alias name of your choice, like thetaxireleasekey . after entering this command you will be taken through some questions that you need to fill and will work as signature of your release APKs. after that you will need to enter your release key's passwords and alias in file gradle.properties so generation of SHA-1 key and APK's would be done automatically from now on.","title":"Generate Release keystore"},{"location":"client-android/auth.html#get-sha-1-key","text":"If you have done the previous step correctly this should be pretty easy. Open Gradle panel in Android studio. Then open node of Tasks- android- signingReport . Runing signingReport will show a report on Run panel that has SHA-1 key for both release key and debug key. Now have this SHA-1 keys copied somewhere because you will need it during applying for Firebase Authentication. Important Firebase Auth won't work in Emulator, So always use real device for that purpose.","title":"Get SHA-1 key"},{"location":"client-android/auth.html#create-project","text":"Go to Firebase Console and Here you can create new projects. You will need 2. One For driver and one for rider . Do the following steps for both of them.","title":"Create Project"},{"location":"client-android/auth.html#enable-phone-authentication","text":"After you log into Firebase choice firebase auth and enable Phone sign-in method. Develop- Authentication- Setup Sign-In method- Phone- Enable- Save","title":"Enable Phone Authentication"},{"location":"client-android/auth.html#get-google-servicesjson","text":"In each driver \\ rider project page you will have to add one app with target of Android. With fingerprints put during wizard you can download the google-services.json that you need to put it in driver and rider folder of your android project.","title":"Get google-services.json"},{"location":"client-android/config.html","text":"Configuration You are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open android folder in Android Studio 3.5.3+ Google Maps API Key In common project you have this file named options.xml . open the file which will look like this, In the higlighted line you will require to enter Google Maps API key starting with AIza . This API key will require to have Android Maps SDK , Places SDK Geocoding enabled from Library. Tip To find files faster in Android Studio you can use Double Shift Hotkey so search file bar would appear. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 resources string name= email translatable= false /string string name= website translatable= false /string string name= twitter translatable= false /string string name= instagram translatable= false /string string name= facebook translatable= false /string string name= playStore translatable= false /string string name= fabric_key templateMergeStrategy= preserve translatable= false /string string name= google_maps_key templateMergeStrategy= preserve translatable= false /string string name= defaultLocation translatable= false /string string name= default_language en_US /string bool name= singlePointMode true /bool integer name= maximumDestinations 5 /integer bool name= request_payment_enabled true /bool integer name= minimum_payment_request 10 /integer integer name= charge_first 10 /integer integer name= charge_second 20 /integer integer name= charge_third 50 /integer integer name= minimum_points 2 /integer integer name= maximum_points 2 /integer bool name= use_miles false /bool /resources Server Address This piece of information is to be entered at the file named Config.kt . Use search again and open it then replace the address with yours. ApplicationId In previous sections you have selected an applicationId. now change the default applicationId to the one you have selected in each project's build.gradle file.","title":"Configuration"},{"location":"client-android/config.html#configuration","text":"You are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open android folder in Android Studio 3.5.3+","title":"Configuration"},{"location":"client-android/config.html#google-maps-api-key","text":"In common project you have this file named options.xml . open the file which will look like this, In the higlighted line you will require to enter Google Maps API key starting with AIza . This API key will require to have Android Maps SDK , Places SDK Geocoding enabled from Library. Tip To find files faster in Android Studio you can use Double Shift Hotkey so search file bar would appear. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 resources string name= email translatable= false /string string name= website translatable= false /string string name= twitter translatable= false /string string name= instagram translatable= false /string string name= facebook translatable= false /string string name= playStore translatable= false /string string name= fabric_key templateMergeStrategy= preserve translatable= false /string string name= google_maps_key templateMergeStrategy= preserve translatable= false /string string name= defaultLocation translatable= false /string string name= default_language en_US /string bool name= singlePointMode true /bool integer name= maximumDestinations 5 /integer bool name= request_payment_enabled true /bool integer name= minimum_payment_request 10 /integer integer name= charge_first 10 /integer integer name= charge_second 20 /integer integer name= charge_third 50 /integer integer name= minimum_points 2 /integer integer name= maximum_points 2 /integer bool name= use_miles false /bool /resources","title":"Google Maps API Key"},{"location":"client-android/config.html#server-address","text":"This piece of information is to be entered at the file named Config.kt . Use search again and open it then replace the address with yours.","title":"Server Address"},{"location":"client-android/config.html#applicationid","text":"In previous sections you have selected an applicationId. now change the default applicationId to the one you have selected in each project's build.gradle file.","title":"ApplicationId"},{"location":"client-android/maps.html","text":"Google Maps Google Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working. Maps console Go to Google Maps Developers Console and select taxi project which was created in previous section. Warning Having Billing enabled on your Google Account is mandatory for some API's to work. So make sure you have the billing enabled or there might be some parts don't work as expected. Enabling APIs You need to have these APIs enabled in library section one by one: Maps SDK for Android Maps Static API Places API Distance Matrix API Geocoding API Maps JavaScript API Getting API key Now go to Credentials section and create a new one. One for Android applications and limited to their applicationId and another for your server app. Save the API key you have retrieved for your applications. you will need it in next section .","title":"Google Maps"},{"location":"client-android/maps.html#google-maps","text":"Google Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working.","title":"Google Maps"},{"location":"client-android/maps.html#maps-console","text":"Go to Google Maps Developers Console and select taxi project which was created in previous section. Warning Having Billing enabled on your Google Account is mandatory for some API's to work. So make sure you have the billing enabled or there might be some parts don't work as expected.","title":"Maps console"},{"location":"client-android/maps.html#enabling-apis","text":"You need to have these APIs enabled in library section one by one: Maps SDK for Android Maps Static API Places API Distance Matrix API Geocoding API Maps JavaScript API","title":"Enabling APIs"},{"location":"client-android/maps.html#getting-api-key","text":"Now go to Credentials section and create a new one. One for Android applications and limited to their applicationId and another for your server app. Save the API key you have retrieved for your applications. you will need it in next section .","title":"Getting API key"},{"location":"client-android/onesignal.html","text":"OneSignal Having OneSignal in your app will have two features: 1-Drivers will get notification even when app is in background. 2-You can send manual push notifications to drivers or riders containing promotional messages. Setup OneSignal You have already created two OneSignal apps. Now you will need to Only get the Server Key Sender Id of your applications from their firebase console's project settings under Cloud Messaging Section and put them in Android setup of your OneSignal project. Then put their Application Ids under their corresponding section in your build.gradle of driver rider .","title":"OneSignal"},{"location":"client-android/onesignal.html#onesignal","text":"Having OneSignal in your app will have two features: 1-Drivers will get notification even when app is in background. 2-You can send manual push notifications to drivers or riders containing promotional messages.","title":"OneSignal"},{"location":"client-android/onesignal.html#setup-onesignal","text":"You have already created two OneSignal apps. Now you will need to Only get the Server Key Sender Id of your applications from their firebase console's project settings under Cloud Messaging Section and put them in Android setup of your OneSignal project. Then put their Application Ids under their corresponding section in your build.gradle of driver rider .","title":"Setup OneSignal"},{"location":"client-ios/auth.html","text":"Firebase Auth Firebase phone authentication has been used for driver and rider's authenticatioin proccess. It provides us with free phone authentication SMS which has been localized for many countries too. Create Project Use your own Google account or register for a new one for this app. Then go to firebase console and Then click on add project to create a new project and fill the fields: Enable phone authentication After you log into Firebase choice firebase auth and enable Phone sign-in method. (Develop- Authentication- Setup Sign-In method- Phone- Enable- Save) Add applications You will need to add two applications to dashboard for rider and driver app. To do so go to project settings. Then hit Add iOS app button. A dialog will be shown to you that you will need to select application Id and name of rider/driver here. Now you will receive a file named google-services.plist which you will need to add to driver/rider project as Firebase instructs on this screen too. Now repeat this section for the other app too. (rider or driver) After finishing this both of your driver and rider folder should have a file named google-services.plist in their folder.","title":"Firebase Auth"},{"location":"client-ios/auth.html#firebase-auth","text":"Firebase phone authentication has been used for driver and rider's authenticatioin proccess. It provides us with free phone authentication SMS which has been localized for many countries too.","title":"Firebase Auth"},{"location":"client-ios/auth.html#create-project","text":"Use your own Google account or register for a new one for this app. Then go to firebase console and Then click on add project to create a new project and fill the fields:","title":"Create Project"},{"location":"client-ios/auth.html#enable-phone-authentication","text":"After you log into Firebase choice firebase auth and enable Phone sign-in method. (Develop- Authentication- Setup Sign-In method- Phone- Enable- Save)","title":"Enable phone authentication"},{"location":"client-ios/auth.html#add-applications","text":"You will need to add two applications to dashboard for rider and driver app. To do so go to project settings. Then hit Add iOS app button. A dialog will be shown to you that you will need to select application Id and name of rider/driver here. Now you will receive a file named google-services.plist which you will need to add to driver/rider project as Firebase instructs on this screen too. Now repeat this section for the other app too. (rider or driver) After finishing this both of your driver and rider folder should have a file named google-services.plist in their folder.","title":"Add applications"},{"location":"client-ios/config.html","text":"Configuration You are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open ios folder with XCode 11.2.1+. Cocoapods Cocoapods is the must used dependency manager used for xcode. before compiling the project in XCode you will need to run pod install inside ios folder so all dependencies will be downloaded and installed. This process might take a few minutes. Backend In common folder there is a file named Config.swift . Open this file and edit Backend value to dashboard address. 1 2 3 4 5 6 7 8 9 static var Backend : String { get { #if DEBUG return http://localhost:8080/ #else return http://x.x.x.x:3000/ #endif } } Bundle Identifier In previous sections you have selected an Bundle Identifier. This identifier looks like com.anything.somethingelse . You should choose one for both driver and rider apps which should be unique on App store too.","title":"Configuration"},{"location":"client-ios/config.html#configuration","text":"You are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open ios folder with XCode 11.2.1+.","title":"Configuration"},{"location":"client-ios/config.html#cocoapods","text":"Cocoapods is the must used dependency manager used for xcode. before compiling the project in XCode you will need to run pod install inside ios folder so all dependencies will be downloaded and installed. This process might take a few minutes.","title":"Cocoapods"},{"location":"client-ios/config.html#backend","text":"In common folder there is a file named Config.swift . Open this file and edit Backend value to dashboard address. 1 2 3 4 5 6 7 8 9 static var Backend : String { get { #if DEBUG return http://localhost:8080/ #else return http://x.x.x.x:3000/ #endif } }","title":"Backend"},{"location":"client-ios/config.html#bundle-identifier","text":"In previous sections you have selected an Bundle Identifier. This identifier looks like com.anything.somethingelse . You should choose one for both driver and rider apps which should be unique on App store too.","title":"Bundle Identifier"},{"location":"client-ios/maps.html","text":"Google Maps Google Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working. Maps console Go to Google Maps Developers Console and select taxi project which was created in previous section. Enabling APIs You need to have these APIs enabled in library section one by one: * Google Maps Distance Matrix API * Geocoding API * Google Maps iOS SDK * Google Places SDK for iOS Getting API key Now go to Credentials section and create a new one. One for iOS applications and limited to it's Bundle identifier and another for your server app limited to your server ip address. Save the API key you have retrieved for your applications. you will need it in next section .","title":"Google Maps"},{"location":"client-ios/maps.html#google-maps","text":"Google Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working.","title":"Google Maps"},{"location":"client-ios/maps.html#maps-console","text":"Go to Google Maps Developers Console and select taxi project which was created in previous section.","title":"Maps console"},{"location":"client-ios/maps.html#enabling-apis","text":"You need to have these APIs enabled in library section one by one: * Google Maps Distance Matrix API * Geocoding API * Google Maps iOS SDK * Google Places SDK for iOS","title":"Enabling APIs"},{"location":"client-ios/maps.html#getting-api-key","text":"Now go to Credentials section and create a new one. One for iOS applications and limited to it's Bundle identifier and another for your server app limited to your server ip address. Save the API key you have retrieved for your applications. you will need it in next section .","title":"Getting API key"},{"location":"server/configuration.html","text":"Configuration With having prerequisites installed you can now run the server app. For that purpose we will use pm2 which is a production process manager suite that will keep app running and log it's status for us. To do that extract backend.zip somewhere in your server then run the server-linux file using pm2 start server-linux . Now you should be able to open dashboard from browser and initiate configuration steps. The dashboard address would be your server address with port 8080 by default. (eg. http://x.x.x.x:8080/ ) Tip In some servers port 8080 is not accessible for external access due to their firewall. To fix this prefer to FAQ In browser you will see a wizard which you will need to fill with required keys to run the App. Wizard Purchase Code You will need to put your purchase code for validation. This was delivered to you at email after you made your purchase from codecanyon. MySQL By default only field that requires changing here is MySQL password that you set in it's own section Google Maps API Key This API key is to be retrieved From Google Developers console. It would require Distance Matrix API API being enabled from Library . Warning Having Billing enabled on your Google Account is mandatory for some API's to work. So make sure you have the billing enabled or there might be some parts don't work as expected. Firebase Admin SDK Firebase is currently being used for it's Free Phone Auth Notification services. You will need to create two separate Firebase projects on their console for driver rider and for each one of them The key file and Database URL required for app to work can be retrieved from Firebase console's project setting under Service Accounts . After uploading entering these information your setup will be done. Give backend a few seconds to set itself up then refresh and enter dashboard with default admin admin credentials \ud83c\udf89","title":"Configuration"},{"location":"server/configuration.html#configuration","text":"With having prerequisites installed you can now run the server app. For that purpose we will use pm2 which is a production process manager suite that will keep app running and log it's status for us. To do that extract backend.zip somewhere in your server then run the server-linux file using pm2 start server-linux . Now you should be able to open dashboard from browser and initiate configuration steps. The dashboard address would be your server address with port 8080 by default. (eg. http://x.x.x.x:8080/ ) Tip In some servers port 8080 is not accessible for external access due to their firewall. To fix this prefer to FAQ In browser you will see a wizard which you will need to fill with required keys to run the App.","title":"Configuration"},{"location":"server/configuration.html#wizard","text":"","title":"Wizard"},{"location":"server/configuration.html#purchase-code","text":"You will need to put your purchase code for validation. This was delivered to you at email after you made your purchase from codecanyon.","title":"Purchase Code"},{"location":"server/configuration.html#mysql","text":"By default only field that requires changing here is MySQL password that you set in it's own section","title":"MySQL"},{"location":"server/configuration.html#google-maps-api-key","text":"This API key is to be retrieved From Google Developers console. It would require Distance Matrix API API being enabled from Library . Warning Having Billing enabled on your Google Account is mandatory for some API's to work. So make sure you have the billing enabled or there might be some parts don't work as expected.","title":"Google Maps API Key"},{"location":"server/configuration.html#firebase-admin-sdk","text":"Firebase is currently being used for it's Free Phone Auth Notification services. You will need to create two separate Firebase projects on their console for driver rider and for each one of them The key file and Database URL required for app to work can be retrieved from Firebase console's project setting under Service Accounts . After uploading entering these information your setup will be done. Give backend a few seconds to set itself up then refresh and enter dashboard with default admin admin credentials \ud83c\udf89","title":"Firebase Admin SDK"},{"location":"server/mysql.html","text":"MySQL MySQL is used as main database source in this solution. You should have it installed on your VPS using following commands: CentOS 7 1 2 3 4 wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm sudo rpm -ivh mysql57-community-release-el7-9.noarch.rpm sudo yum install mysql-server sudo systemctl start mysqld Ubuntu 16.04 1 2 sudo apt-get update sudo apt-get install mysql-server And Then After you have installed MySQL you can do mysql installation wizard to make it more secure and set a password for your database. Doing this is important because without this your users info could be open for security risks. Enter following command and wizard will be started: 1 mysql_secure_installation Tip If this installation requested password that you didn't set during installation you should use this command to get a temporary password to be able to continue installation: 1 sudo grep temporary password /var/log/mysqld.log","title":"MySQL"},{"location":"server/mysql.html#mysql","text":"MySQL is used as main database source in this solution. You should have it installed on your VPS using following commands: CentOS 7 1 2 3 4 wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm sudo rpm -ivh mysql57-community-release-el7-9.noarch.rpm sudo yum install mysql-server sudo systemctl start mysqld Ubuntu 16.04 1 2 sudo apt-get update sudo apt-get install mysql-server","title":"MySQL"},{"location":"server/mysql.html#and-then","text":"After you have installed MySQL you can do mysql installation wizard to make it more secure and set a password for your database. Doing this is important because without this your users info could be open for security risks. Enter following command and wizard will be started: 1 mysql_secure_installation Tip If this installation requested password that you didn't set during installation you should use this command to get a temporary password to be able to continue installation: 1 sudo grep temporary password /var/log/mysqld.log","title":"And Then"},{"location":"server/pm2.html","text":"PM2 PM2 is main service manager used to run and log services status. Installation of it would be necessary. Install 1 wget -qO- https://getpm2.com/install.sh | bash","title":"PM2"},{"location":"server/pm2.html#pm2","text":"PM2 is main service manager used to run and log services status. Installation of it would be necessary.","title":"PM2"},{"location":"server/pm2.html#install","text":"1 wget -qO- https://getpm2.com/install.sh | bash","title":"Install"},{"location":"server/redis.html","text":"Redis Redis is a fast in-memory key-value store data structure and it's been used for some caching mechanism so the app would work faster and under the heavy load it would be able to perform well. Installation You can do the installation in any folder you would prefer. Enter the following commands one by one. they will get you through downloading latest source code and compiling them: CentOS 7 1 2 3 4 5 6 7 8 sudo yum groupinstall Development Tools wget http://download.redis.io/redis-stable.tar.gz tar xvzf redis-stable.tar.gz cd redis-stable make sudo make install cd utils sh install_server.sh Ubuntu 16.04 1 2 3 4 5 6 7 8 sudo apt install build-essential wget http://download.redis.io/redis-stable.tar.gz tar xvzf redis-stable.tar.gz cd redis-stable make sudo make install cd utils sh install_server.sh The last line will start that you can press Enter each one so default value will be used. Important you won't need to set a password and you should leave it empty","title":"Redis"},{"location":"server/redis.html#redis","text":"Redis is a fast in-memory key-value store data structure and it's been used for some caching mechanism so the app would work faster and under the heavy load it would be able to perform well.","title":"Redis"},{"location":"server/redis.html#installation","text":"You can do the installation in any folder you would prefer. Enter the following commands one by one. they will get you through downloading latest source code and compiling them: CentOS 7 1 2 3 4 5 6 7 8 sudo yum groupinstall Development Tools wget http://download.redis.io/redis-stable.tar.gz tar xvzf redis-stable.tar.gz cd redis-stable make sudo make install cd utils sh install_server.sh Ubuntu 16.04 1 2 3 4 5 6 7 8 sudo apt install build-essential wget http://download.redis.io/redis-stable.tar.gz tar xvzf redis-stable.tar.gz cd redis-stable make sudo make install cd utils sh install_server.sh The last line will start that you can press Enter each one so default value will be used. Important you won't need to set a password and you should leave it empty","title":"Installation"},{"location":"translation/android.html","text":"Translation The strings.xml can be found under /common/src/main/res/ . This file has everything translatable.","title":"Android"},{"location":"translation/android.html#translation","text":"The strings.xml can be found under /common/src/main/res/ . This file has everything translatable.","title":"Translation"},{"location":"translation/dashboard.html","text":"Translation Translation file for dashboard is in your server under public folder. There is a file named translations.json that you can add languages by adding another JSON object with a language code. Tip JSON objects syntax are strict. after making any change on this file make sure you check the syntax with either an Online JSON validator or your text editor could support it.","title":"Dashboard"},{"location":"translation/dashboard.html#translation","text":"Translation file for dashboard is in your server under public folder. There is a file named translations.json that you can add languages by adding another JSON object with a language code. Tip JSON objects syntax are strict. after making any change on this file make sure you check the syntax with either an Online JSON validator or your text editor could support it.","title":"Translation"},{"location":"translation/ios.html","text":"Translation You can generate latest XCode translation package by opening each project and from Edit Menu By Selecting Export for Localization. All App Strings including currency is now supported by this. For more information on this you can use Official Apple Documentation","title":"iOS"},{"location":"translation/ios.html#translation","text":"You can generate latest XCode translation package by opening each project and from Edit Menu By Selecting Export for Localization. All App Strings including currency is now supported by this. For more information on this you can use Official Apple Documentation","title":"Translation"}]}